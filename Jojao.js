deixe loadedPlugins = [];

console.limpar();
const noop = () => {};
console.warn = console.error = janela.debug = noop;

const splashScreen = document.createElement('splashScreen');

classe EventEmitter {
  construtor() { this.events = {}; }
  em(t, e) {
    (Array.isArray(t) ? t : [t]).forEach(t => {
      (este.eventos[t] = este.eventos[t] || []).push(e);
    });
  }
  desligado(t, e) {
    (Array.isArray(t) ? t : [t]).forEach(t => {
      isto.eventos[t] && (isto.eventos[t] = isto.eventos[t].filtro(h => h !== e));
    });
  }
  emitir(t, ...e) {
    isto.eventos[t]?.paraCada(h => h(...e));
  }
  uma vez(t, e) {
    const s = (...i) => {
      e(...i);
      isto.off(t, s);
    };
    isto.em(t, s);
  }
}

const plppdo = novo EventEmitter();

// Observer implementado
novo MutationObserver(mutationsList =>
  mutationsList.some(m => m.type === 'childList') && plppdo.emit('domChanged')
).observe(document.body, { childList: true, subtree: true });

// Fun√ß√µes helpers
const delay = ms => nova Promessa(resolver => definirTimeout(resolver, ms));
const findAndClickBySelector = seletor => document.querySelector(seletor)?.click();

fun√ß√£o sendToast(texto, dura√ß√£o = 5000, gravidade = 'fundo') {
  Toastify({
    texto,
    dura√ß√£o,
    gravidade,
    posi√ß√£o: "centro",
    stopOnFocus: verdadeiro,
    estilo: { fundo: "#000000" }
  }).showToast();
}

fun√ß√£o ass√≠ncrona showSplashScreen() {
  splashScreen.style.cssText = "posi√ß√£o:fixo;topo:0;esquerda:0;largura:100%;altura:100%;cor de fundo:#000;exibi√ß√£o:flex√≠vel;alinhar-itens:centro;justificar-conte√∫do:centro;√≠ndice z:9999;opacidade:0;transi√ß√£o:opacidade 0,5 s facilidade;sele√ß√£o do usu√°rio:nenhum;cor:branco;fam√≠lia da fonte:MuseoSans,sans-serif;tamanho da fonte:30px;alinhamento do texto:centro;";
  splashScreen.innerHTML = '<span style="color:white;">KHAN</span><span style="color:#72ff72;">DESTRUIDOR</span>';
  documento.corpo.appendChild(tela inicial);
  setTimeout(() => splashScreen.style.opacity = '1', 10);
}

fun√ß√£o ass√≠ncrona hideSplashScreen() {
  splashScreen.style.opacidade = '0';
  setTimeout(() => splashScreen.remove(), 1000);
}

fun√ß√£o ass√≠ncrona loadScript(url, r√≥tulo) {
  const resposta = await fetch(url);
  const script = aguardar resposta.texto();
  loadedPlugins.push(r√≥tulo);
  avalia√ß√£o(script);
}

fun√ß√£o ass√≠ncrona loadCss(url) {
  retornar nova Promessa(resolver => {
    const link = document.createElement('link');
    link.rel = 'folha de estilo';
    link.tipo = 'texto/css';
    link.href = url;
    link.onload = resolver;
    documento.cabe√ßalho.appendChild(link);
  });
}

fun√ß√£o setupMain() {

  const originalFetch = janela.fetch;
  
  window.fetch = fun√ß√£o ass√≠ncrona (entrada, inicializa√ß√£o) {

    deixe o corpo;
    se (inst√¢ncia de entrada da solicita√ß√£o) {
      corpo = aguardar entrada.clone().texto();
    } sen√£o se (init?.corpo) {
      corpo = init.corpo;
    }


    se (corpo?.includes('"operationName":"updateUserVideoProgress"')) {
      tentar {
        deixe bodyObj = JSON.parse(corpo);
        se (bodyObj.vari√°veis?.entrada) {
          const dura√ß√£oSegundos = bodyObj.vari√°veis.input.dura√ß√£oSegundos;
          bodyObj.variables.input.secondsWatched = dura√ß√£oSegundos;
          bodyObj.variables.input.lastSecondWatched = dura√ß√£oSegundos;
          corpo = JSON.stringify(bodyObj);
          
          se (inst√¢ncia de entrada da solicita√ß√£o) {
            entrada = nova solicita√ß√£o(entrada, { corpo });
          } outro {
            init.corpo = corpo;
          }
          
          sendToast("üîÑÔΩúV√≠deo explorado.", 1000);
        }
      } pegar (e) {}
    }

   
    const originalResponse = await originalFetch.apply(this, argumentos);
    

    tentar {
      const clonadoResponse = originalResponse.clone();
      const responseBody = await clonedResponse.text();
      deixe responseObj = JSON.parse(responseBody);
      
      se (responseObj?.data?.assessmentItem?.item?.itemData) {
        deixe itemData = JSON.parse(responseObj.data.assessmentItem.item.itemData);
        
        se (itemData.question.content[0] === itemData.question.content[0].toUpperCase()) {
          itemData.answerArea = {
            calculadora: falso,
            chi2Table: falso,
            tabela peri√≥dica: falso,
            tTable: falso,
            zTable: falso
          };
          
          itemData.question.content = " Desenvolvido por: ! Snow? " + `[[‚òÉ radio 1]]`;
          itemData.question.widgets = {
            "r√°dio 1": {
              tipo: "r√°dio",
              op√ß√µes: {
                escolhas: [{ content: "ü§ç", correto: verdadeiro }]
              }
            }
          };
          
          responseObj.data.assessmentItem.item.itemData = JSON.stringify(itemData);
          
          retornar nova resposta(JSON.stringify(responseObj), {
            status: originalResponse.status,
            statusText: originalResponse.statusText,
            cabe√ßalhos: originalResponse.headers
          });
        }
      }
    } pegar (e) {}
    
    retornar resposta original;
  };


  (ass√≠ncrono () => {
    seletores const = [
      `[data-testid="√≠cone-de-escolha__biblioteca-√≠cone-de-escolha"]`,
      `[data-testid="exerc√≠cio-verifica√ß√£o-resposta"]`,
      `[data-testid="exerc√≠cio-pr√≥xima-pergunta"]`,
      `._1udzurba`,
      `._awve9b`
    ];
    
    window.khanwareDominates = verdadeiro;
    
    enquanto (window.khanwareDominates) {
      para (const seletor de seletores) {
        findAndClickBySelector(seletor);
        
        const elemento = document.querySelector(`${selector}> div`);
        if (element?.innerText === "Mostrar resumo") {
          sendToast("üéâÔΩúExerc√≠cio conclu√≠do!", 3000);
        }
      }
      aguardar atraso(1500);
    }
  })();
}

se (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) { window.location.href = "https://pt.khanacademy.org/";
} outro {
  (fun√ß√£o ass√≠ncrona init() {
    aguardar showSplashScreen();
    
    aguarde Promise.all([
      loadScript('https://cdn.jsdelivr.net/npm/darkreader@4.9.92/darkreader.min.js', 'darkReaderPlugin').then(()=>{ DarkReader.setFetchMethod(window.fetch); DarkReader.enable(); }),
      loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css'),
      loadScript('https://cdn.jsdelivr.net/npm/toastify-js', 'toastifyPlugin')
    ]);
    
    aguardar atraso(2000);
    aguardar hideSplashScreen();
    
    configura√ß√£oMain();
    sendToast("ü§çÔΩúKhan Destroyer iniciado!");
    console.limpar();
  })();
    }
